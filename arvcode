
package org.firstinspires.ftc.teamcode;
// import android.graphics.`Camera`;


import android.graphics.Camera;
import com.qualcomm.hardware.modernrobotics.ModernRoboticsTouchSensor;
import com.qualcomm.hardware.rev.RevTouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;

import android.graphics.Camera;
import com.qualcomm.hardware.modernrobotics.ModernRoboticsTouchSensor;
import com.qualcomm.hardware.rev.RevTouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;



import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.ejml.dense.fixed.MatrixFeatures_DDF2;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Pose2D;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;


import java.util.Locale;



import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.ejml.dense.fixed.MatrixFeatures_DDF2;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Pose2D;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;


import java.util.Locale;

/*
This opmode shows how to use the goBILDAÂ® Pinpoint Odometry Computer.
The goBILDA Odometry Computer is a device designed to solve the Pose Exponential calculation
commonly associated with Dead Wheel Odometry systems. It reads two encoders, and an integrated
system of senors to determine the robot's current heading, X position, and Y position.

it uses an ESP32-S3 as a main cpu, with an STM LSM6DSV16X IMU.
It is validated with goBILDA "Dead Wheel" Odometry pods, but should be compatible with any
quadrature rotary encoder. The ESP32 PCNT peripheral is speced to decode quadrature encoder signals
at a maximum of 40mhz per channel. Though the maximum in-application tested number is 130khz.

The device expects two perpendicularly mounted Dead Wheel pods. The encoder pulses are translated
into mm and their readings are transformed by an "offset", this offset describes how far away
the pods are from the "tracking point", usually the center of rotation of the robot.

Dead Wheel pods should both increase in count when moved forwards and to the left.
The gyro will report an increase in heading when rotated counterclockwise.

The Pose Exponential algorithm used is described on pg 181 of this book:
https://github.com/calcmogul/controls-engineering-in-frc

For support, contact tech@gobilda.com

-Ethan Doak
 */
@Config
@Autonomous(name="ANTSMAINAUTONOMOUS", group="Linear OpMode")
public class ANTSMAINAUTON extends LinearOpMode {

    // Declare OpMode members for each of the 4 motors.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftFrontDrive = null;
    private DcMotor leftBackDrive = null;
    private DcMotor rightFrontDrive = null;
    private DcMotor rightBackDrive = null;

    private DcMotor specimenslide = null;
    private Servo claw = null;


    private Camera camera;
    GoBildaPinpointDriver odo; // Declare OpMode member for the Odometry Computer

    double oldTime = 0;


    double integralsum = 0;
    double Psens = 0.05;
    double Isens = 0;
    double Dsens = 0.0007;
    double lasterror;

    double lastXerror;
    double lastYerror;
    public static  double XPsens = 0;
   public static double YPsens = 0;

    double XIsens = 0;
    double YIsens = 0;
    public static double XDsens = 0;
    public static double YDsens = 0;

    double specimenslidetargetposition;

    public static double Xdesiredposition;
    public static double Ydesiredposition;


    String whichtuning = "PROPORTIONAL";
    ElapsedTime timer = new ElapsedTime();


    @Override
    public void runOpMode() {

        // WHEELS
        leftFrontDrive = hardwareMap.get(DcMotor.class, "backleft");
        leftBackDrive = hardwareMap.get(DcMotor.class, "frontleft");
        rightFrontDrive = hardwareMap.get(DcMotor.class, "backright");
        rightBackDrive = hardwareMap.get(DcMotor.class, "frontright");

        // SPECIMENSLIDE
        specimenslide = hardwareMap.get(DcMotor.class, "specimenslide");
        claw = hardwareMap.get(Servo.class, "claw");

        // other
        odo = hardwareMap.get(GoBildaPinpointDriver.class, "odocomp");
        // Drive wheel rotation correction(positive powers make the wheels rotate forward
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightBackDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);

        odometrysetup();

        specimenslidereset();

        // Dashboard setup
        FtcDashboard dashboard = FtcDashboard.getInstance();
        telemetry = new MultipleTelemetry(telemetry, dashboard.getTelemetry());


        int i = 0;
        // Wait for the game to start (driver presses START)
        waitForStart();
        resetRuntime();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            i += 1;

            odometryrun();


            telemetry.addData("coderuns","code");
            telemetry.update();



            double x;
            x = 0;
            driveposition();

        }
    }

//    private void adrive(double axialtargetposition, double lateraltargetposition, double yawtargetposition) {
//        double leftFrontPower = axial - lateral + yaw;
//        double rightFrontPower = axial + lateral - yaw;
//        double leftBackPower = axial + lateral + yaw;
//        double rightBackPower = axial - lateral - yaw;
//    }

    // angle, power, turn
    private void rdrive(double theta, double power, double turn) {
        double sin = Math.sin((theta * (Math.PI / 180)) - (Math.PI / 4));
        double cos = Math.cos((theta * (Math.PI / 180)) - (Math.PI / 4));
        double maxSinCos = Math.max(Math.abs(sin), Math.abs(cos));

        double leftFront = -(power * cos / maxSinCos);
        double rightFront = (power * sin / maxSinCos);
        double leftBack = (power * sin / maxSinCos );
        double rightBack = (power * cos / maxSinCos);


        if ((power + Math.abs(turn)) > 1) {
            leftFront /= power + turn;
            rightFront /= power - turn;
            leftBack /= power + turn;
            rightBack /= power - turn;
        }
        telemetry.addData("leftfrontpower",leftFront);
        telemetry.addData("rightfrontpower",rightFront);
        telemetry.addData("rightbackpower",rightBack);
        telemetry.addData("leftbackpower",leftBack);
        telemetry.update();
        leftFrontDrive.setPower(leftFront);
        leftBackDrive.setPower(leftBack);
        rightFrontDrive.setPower(rightFront);
        rightBackDrive.setPower(rightBack);
    }

    private void driveposition (){

        Pose2D pos = odo.getPosition();

        double xpos = pos.getX(DistanceUnit.MM);
        double ypos = pos.getY(DistanceUnit.MM);
        double Xerror = Xdesiredposition - xpos;
        double Yerror = Ydesiredposition - ypos;
        double Xderivative = (Xerror - lastXerror) / timer.seconds();
        double Yderivative = (Yerror - lastYerror) / timer.seconds();
        lastXerror = Xerror;
        lastYerror = Yerror;
        timer.reset();
        double Xpower = (Xerror*XPsens) + (Xderivative * XDsens);
        double Ypower = (Yerror*YPsens) + (Yderivative * YDsens);
        leftFrontDrive.setPower(Xpower-Ypower);
        rightFrontDrive.setPower(Xpower+Ypower);
        leftBackDrive.setPower(Xpower+Ypower);
        rightBackDrive.setPower(Xpower-Ypower);

        telemetry.addData("xpos", Double.toString(xpos));
        telemetry.addData("ypos", Double.toString(ypos));
        telemetry.addData("Xerrror", Double.toString(Xerror));
        telemetry.addData("Yerror", Double.toString(Yerror));
        telemetry.addData("Xderivative", Double.toString(Xderivative));
        telemetry.addData("Yderivative", Double.toString(Yderivative));
        telemetry.addData("Xpower", Double.toString(Xpower));
        telemetry.addData("Ypower", Double.toString(Ypower));

        telemetry.addData("XPsens", XPsens);
        telemetry.addData("YPsens", YPsens);
        telemetry.addData("XDsens", XDsens);
        telemetry.addData("YDsens", YDsens);
        telemetry.addData("Xdesiredposition", Xdesiredposition);
        telemetry.addData("Ydesiredpsoiton", Ydesiredposition);
    }






    private void teleupdate() {
        telemetry.addData("TUNING ", whichtuning);
        telemetry.addData("PSENS ", Psens);
        telemetry.addData("ISENS ", Isens);
        telemetry.addData("DSENS ", Dsens);
        telemetry.update();
    }

        private void outslide ( double targetposition){
            double error = targetposition - specimenslide.getCurrentPosition();
            //integralsum += error * timer.seconds();
            double derivative = (error - lasterror) / timer.seconds();
            lasterror = error;
            timer.reset();
            double specimenslidepower = (error * Psens) + (derivative * Dsens);// + (integralsum * Isens);
            specimenslide.setPower(specimenslidepower);
        }






    private void odometryrun () {
        /*
            Request an update from the Pinpoint odometry computer. This checks almost all outputs
            from the device in a single I2C read.
             */
        odo.update();

            /*
            Optionally, you can update only the heading of the device. This takes less time to read, but will not
            pull any other data. Only the heading (which you can pull with getHeading() or in getPosition().
             */
        //odo.update(GoBildaPinpointDriver.readData.ONLY_UPDATE_HEADING);




            /*
            This code prints the loop frequency of the REV Control Hub. This frequency is effected
            by IÂ²C reads/writes. So it's good to keep an eye on. This code calculates the amount
            of time each cycle takes and finds the frequency (number of updates per second) from
            that cycle time.
             */
        double newTime = getRuntime();
        double loopTime = newTime - oldTime;
        double frequency = 1 / loopTime;
        oldTime = newTime;


            /*
            gets the current Position (x & y in mm, and heading in degrees) of the robot, and prints it.
             */
        Pose2D pos = odo.getPosition();
        String data = String.format(Locale.US, "{X: %.3f, Y: %.3f, H: %.3f}", pos.getX(DistanceUnit.MM), pos.getY(DistanceUnit.MM), pos.getHeading(AngleUnit.DEGREES));
//            telemetry.addData("Position", data);

            /*
            gets the current Velocity (x & y in mm/sec and heading in degrees/sec) and prints it.
             */
        Pose2D vel = odo.getVelocity();
        String velocity = String.format(Locale.US, "{XVel: %.3f, YVel: %.3f, HVel: %.3f}", vel.getX(DistanceUnit.MM), vel.getY(DistanceUnit.MM), vel.getHeading(AngleUnit.DEGREES));
//            telemetry.addData("Velocity", velocity);
//
//
//            telemetry.addData("X offset", odo.getXOffset());



            /*
            Gets the Pinpoint device status. Pinpoint can reflect a few states. But we'll primarily see
            READY: the device is working as normal
            CALIBRATING: the device is calibrating and outputs are put on hold
            NOT_READY: the device is resetting from scratch. This should only happen after a power-cycle
            FAULT_NO_PODS_DETECTED - the device does not detect any pods plugged in
            FAULT_X_POD_NOT_DETECTED - The device does not detect an X pod plugged in
            FAULT_Y_POD_NOT_DETECTED - The device does not detect a Y pod plugged in

            */
//            telemetry.addData("Status", odo.getDeviceStatus());
//
//            telemetry.addData("Pinpoint Frequency", odo.getFrequency()); //prints/gets the current refresh rate of the Pinpoint
//
//
//            telemetry.addData("targetpos", Double.toString(targetXposition));
//
//            telemetry.addData("REV Hub Frequency: ", frequency); //prints the control system refresh rate
//            telemetry.update();
    }
    private void odometrysetup () {
                /*
        Set the odometry pod positions relative to the point that the odometry computer tracks around.
        The X pod offset refers to how far sideways from the tracking point the
        X (forward) odometry pod is. Left of the center is a positive number,
        right of center is a negative number. the Y pod offset refers to how far forwards from
        the tracking point the Y (strafe) odometry pod is. forward of center is a positive number,
        backwards is a negative number.
         */
            odo.setOffsets(-72, -112);

        /*
        Set the kind of pods used by your robot. If you're using goBILDA odometry pods, select either
        the goBILDA_SWINGARM_POD, or the goBILDA_4_BAR_POD.
        If you're using another kind of odometry pod, uncomment setEncoderResolution and input the
        number of ticks per mm of your odometry pod.
         */
            odo.setEncoderResolution(GoBildaPinpointDriver.GoBildaOdometryPods.goBILDA_4_BAR_POD);
            //odo.setEncoderResolution(13.26291192);


        /*
        Set the direction that each of the two odometry pods count. The X (forward) pod should
        increase when you move the robot forward. And the Y (strafe) pod should increase when
        you move the robot to the left.
         */
            odo.setEncoderDirections(GoBildaPinpointDriver.EncoderDirection.FORWARD, GoBildaPinpointDriver.EncoderDirection.FORWARD);




        /*
        Before running the robot, recalibrate the IMU. This needs to happen when the robot is stationary
        The IMU will automatically calibrate when first powered on, but recalibrating before running
        the robot is a good idea to ensure that the calibration is "good".
        resetPosAndIMU will reset the position to 0,0,0 and also recalibrate the IMU.
        This is recommended before you run your autonomous, as a bad initial calibration can cause
        an incorrect starting value for x, y, and heading.
         */
            //odo.recalibrateIMU();
            odo.resetPosAndIMU();


//        telemetry.addData("Status", "Initialized");
//        telemetry.addData("X offset", odo.getXOffset());
//        telemetry.addData("Y offset", odo.getYOffset());
//        telemetry.addData("Device Version Number:", odo.getDeviceVersion());
//        telemetry.addData("Device Scalar", odo.getYawScalar());
//        telemetry.update();

        }






        private void specimenslidereset () {
            specimenslide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            specimenslide.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            // run without encoder doesnt stop encoder ticks it just stops the in built pid controller from limiting the maximum power
            // if you do run with encoder then the power gets limited
            specimenslide.setDirection(DcMotorSimple.Direction.REVERSE);
        }




    }
